// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_addressbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto;
namespace protobuf {
class AddressBook;
class AddressBookDefaultTypeInternal;
extern AddressBookDefaultTypeInternal _AddressBook_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_AuthenticateWeb;
class Person_AuthenticateWebDefaultTypeInternal;
extern Person_AuthenticateWebDefaultTypeInternal _Person_AuthenticateWeb_default_instance_;
class Person_AuthenticateWebFailure;
class Person_AuthenticateWebFailureDefaultTypeInternal;
extern Person_AuthenticateWebFailureDefaultTypeInternal _Person_AuthenticateWebFailure_default_instance_;
class Person_AuthenticateWebSuccess;
class Person_AuthenticateWebSuccessDefaultTypeInternal;
extern Person_AuthenticateWebSuccessDefaultTypeInternal _Person_AuthenticateWebSuccess_default_instance_;
class Person_CreateAccountWeb;
class Person_CreateAccountWebDefaultTypeInternal;
extern Person_CreateAccountWebDefaultTypeInternal _Person_CreateAccountWeb_default_instance_;
class Person_CreateAccountWebFailure;
class Person_CreateAccountWebFailureDefaultTypeInternal;
extern Person_CreateAccountWebFailureDefaultTypeInternal _Person_CreateAccountWebFailure_default_instance_;
class Person_CreateAccountWebSuccess;
class Person_CreateAccountWebSuccessDefaultTypeInternal;
extern Person_CreateAccountWebSuccessDefaultTypeInternal _Person_CreateAccountWebSuccess_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::AddressBook* Arena::CreateMaybeMessage<::protobuf::AddressBook>(Arena*);
template<> ::protobuf::Person* Arena::CreateMaybeMessage<::protobuf::Person>(Arena*);
template<> ::protobuf::Person_AuthenticateWeb* Arena::CreateMaybeMessage<::protobuf::Person_AuthenticateWeb>(Arena*);
template<> ::protobuf::Person_AuthenticateWebFailure* Arena::CreateMaybeMessage<::protobuf::Person_AuthenticateWebFailure>(Arena*);
template<> ::protobuf::Person_AuthenticateWebSuccess* Arena::CreateMaybeMessage<::protobuf::Person_AuthenticateWebSuccess>(Arena*);
template<> ::protobuf::Person_CreateAccountWeb* Arena::CreateMaybeMessage<::protobuf::Person_CreateAccountWeb>(Arena*);
template<> ::protobuf::Person_CreateAccountWebFailure* Arena::CreateMaybeMessage<::protobuf::Person_CreateAccountWebFailure>(Arena*);
template<> ::protobuf::Person_CreateAccountWebSuccess* Arena::CreateMaybeMessage<::protobuf::Person_CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

enum Person_ReasonError : int {
  Person_ReasonError_ACCOUNT_ALREADY_EXISTS = 0,
  Person_ReasonError_INVALID_PASSWORD = 1,
  Person_ReasonError_INTERNAL_SERVER_ERROR = 2,
  Person_ReasonError_INVALID_CREDENTIALS = 3
};
bool Person_ReasonError_IsValid(int value);
constexpr Person_ReasonError Person_ReasonError_ReasonError_MIN = Person_ReasonError_ACCOUNT_ALREADY_EXISTS;
constexpr Person_ReasonError Person_ReasonError_ReasonError_MAX = Person_ReasonError_INVALID_CREDENTIALS;
constexpr int Person_ReasonError_ReasonError_ARRAYSIZE = Person_ReasonError_ReasonError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Person_ReasonError_descriptor();
template<typename T>
inline const std::string& Person_ReasonError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Person_ReasonError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Person_ReasonError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Person_ReasonError_descriptor(), enum_t_value);
}
inline bool Person_ReasonError_Parse(
    const std::string& name, Person_ReasonError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Person_ReasonError>(
    Person_ReasonError_descriptor(), name, value);
}
// ===================================================================

class Person_CreateAccountWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.CreateAccountWeb) */ {
 public:
  Person_CreateAccountWeb();
  virtual ~Person_CreateAccountWeb();

  Person_CreateAccountWeb(const Person_CreateAccountWeb& from);
  Person_CreateAccountWeb(Person_CreateAccountWeb&& from) noexcept
    : Person_CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline Person_CreateAccountWeb& operator=(const Person_CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_CreateAccountWeb& operator=(Person_CreateAccountWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_CreateAccountWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const Person_CreateAccountWeb*>(
               &_Person_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person_CreateAccountWeb& a, Person_CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_CreateAccountWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_CreateAccountWeb* New() const final {
    return CreateMaybeMessage<Person_CreateAccountWeb>(nullptr);
  }

  Person_CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_CreateAccountWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_CreateAccountWeb& from);
  void MergeFrom(const Person_CreateAccountWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.CreateAccountWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.CreateAccountWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_CreateAccountWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.CreateAccountWebSuccess) */ {
 public:
  Person_CreateAccountWebSuccess();
  virtual ~Person_CreateAccountWebSuccess();

  Person_CreateAccountWebSuccess(const Person_CreateAccountWebSuccess& from);
  Person_CreateAccountWebSuccess(Person_CreateAccountWebSuccess&& from) noexcept
    : Person_CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline Person_CreateAccountWebSuccess& operator=(const Person_CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_CreateAccountWebSuccess& operator=(Person_CreateAccountWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_CreateAccountWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const Person_CreateAccountWebSuccess*>(
               &_Person_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person_CreateAccountWebSuccess& a, Person_CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_CreateAccountWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_CreateAccountWebSuccess* New() const final {
    return CreateMaybeMessage<Person_CreateAccountWebSuccess>(nullptr);
  }

  Person_CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_CreateAccountWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_CreateAccountWebSuccess& from);
  void MergeFrom(const Person_CreateAccountWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.CreateAccountWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.CreateAccountWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_CreateAccountWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.CreateAccountWebFailure) */ {
 public:
  Person_CreateAccountWebFailure();
  virtual ~Person_CreateAccountWebFailure();

  Person_CreateAccountWebFailure(const Person_CreateAccountWebFailure& from);
  Person_CreateAccountWebFailure(Person_CreateAccountWebFailure&& from) noexcept
    : Person_CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline Person_CreateAccountWebFailure& operator=(const Person_CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_CreateAccountWebFailure& operator=(Person_CreateAccountWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_CreateAccountWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const Person_CreateAccountWebFailure*>(
               &_Person_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person_CreateAccountWebFailure& a, Person_CreateAccountWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_CreateAccountWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_CreateAccountWebFailure* New() const final {
    return CreateMaybeMessage<Person_CreateAccountWebFailure>(nullptr);
  }

  Person_CreateAccountWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_CreateAccountWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_CreateAccountWebFailure& from);
  void MergeFrom(const Person_CreateAccountWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_CreateAccountWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.CreateAccountWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .protobuf.Person.ReasonError reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::protobuf::Person_ReasonError reason() const;
  void set_reason(::protobuf::Person_ReasonError value);
  private:
  ::protobuf::Person_ReasonError _internal_reason() const;
  void _internal_set_reason(::protobuf::Person_ReasonError value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.CreateAccountWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  int reason_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_AuthenticateWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.AuthenticateWeb) */ {
 public:
  Person_AuthenticateWeb();
  virtual ~Person_AuthenticateWeb();

  Person_AuthenticateWeb(const Person_AuthenticateWeb& from);
  Person_AuthenticateWeb(Person_AuthenticateWeb&& from) noexcept
    : Person_AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline Person_AuthenticateWeb& operator=(const Person_AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_AuthenticateWeb& operator=(Person_AuthenticateWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_AuthenticateWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const Person_AuthenticateWeb*>(
               &_Person_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Person_AuthenticateWeb& a, Person_AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_AuthenticateWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_AuthenticateWeb* New() const final {
    return CreateMaybeMessage<Person_AuthenticateWeb>(nullptr);
  }

  Person_AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_AuthenticateWeb& from);
  void MergeFrom(const Person_AuthenticateWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.AuthenticateWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.AuthenticateWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_AuthenticateWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.AuthenticateWebSuccess) */ {
 public:
  Person_AuthenticateWebSuccess();
  virtual ~Person_AuthenticateWebSuccess();

  Person_AuthenticateWebSuccess(const Person_AuthenticateWebSuccess& from);
  Person_AuthenticateWebSuccess(Person_AuthenticateWebSuccess&& from) noexcept
    : Person_AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline Person_AuthenticateWebSuccess& operator=(const Person_AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_AuthenticateWebSuccess& operator=(Person_AuthenticateWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_AuthenticateWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const Person_AuthenticateWebSuccess*>(
               &_Person_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Person_AuthenticateWebSuccess& a, Person_AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_AuthenticateWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_AuthenticateWebSuccess* New() const final {
    return CreateMaybeMessage<Person_AuthenticateWebSuccess>(nullptr);
  }

  Person_AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_AuthenticateWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_AuthenticateWebSuccess& from);
  void MergeFrom(const Person_AuthenticateWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.AuthenticateWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  void set_creationdate(const std::string& value);
  void set_creationdate(std::string&& value);
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  std::string* mutable_creationdate();
  std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.AuthenticateWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person_AuthenticateWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person.AuthenticateWebFailure) */ {
 public:
  Person_AuthenticateWebFailure();
  virtual ~Person_AuthenticateWebFailure();

  Person_AuthenticateWebFailure(const Person_AuthenticateWebFailure& from);
  Person_AuthenticateWebFailure(Person_AuthenticateWebFailure&& from) noexcept
    : Person_AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline Person_AuthenticateWebFailure& operator=(const Person_AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_AuthenticateWebFailure& operator=(Person_AuthenticateWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_AuthenticateWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person_AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const Person_AuthenticateWebFailure*>(
               &_Person_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Person_AuthenticateWebFailure& a, Person_AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_AuthenticateWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_AuthenticateWebFailure* New() const final {
    return CreateMaybeMessage<Person_AuthenticateWebFailure>(nullptr);
  }

  Person_AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_AuthenticateWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_AuthenticateWebFailure& from);
  void MergeFrom(const Person_AuthenticateWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_AuthenticateWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person.AuthenticateWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // required uint64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .protobuf.Person.ReasonError reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::protobuf::Person_ReasonError reason() const;
  void set_reason(::protobuf::Person_ReasonError value);
  private:
  ::protobuf::Person_ReasonError _internal_reason() const;
  void _internal_set_reason(::protobuf::Person_ReasonError value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person.AuthenticateWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 requestid_;
  int reason_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class Person :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.Person";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_CreateAccountWeb CreateAccountWeb;
  typedef Person_CreateAccountWebSuccess CreateAccountWebSuccess;
  typedef Person_CreateAccountWebFailure CreateAccountWebFailure;
  typedef Person_AuthenticateWeb AuthenticateWeb;
  typedef Person_AuthenticateWebSuccess AuthenticateWebSuccess;
  typedef Person_AuthenticateWebFailure AuthenticateWebFailure;

  typedef Person_ReasonError ReasonError;
  static constexpr ReasonError ACCOUNT_ALREADY_EXISTS =
    Person_ReasonError_ACCOUNT_ALREADY_EXISTS;
  static constexpr ReasonError INVALID_PASSWORD =
    Person_ReasonError_INVALID_PASSWORD;
  static constexpr ReasonError INTERNAL_SERVER_ERROR =
    Person_ReasonError_INTERNAL_SERVER_ERROR;
  static constexpr ReasonError INVALID_CREDENTIALS =
    Person_ReasonError_INVALID_CREDENTIALS;
  static inline bool ReasonError_IsValid(int value) {
    return Person_ReasonError_IsValid(value);
  }
  static constexpr ReasonError ReasonError_MIN =
    Person_ReasonError_ReasonError_MIN;
  static constexpr ReasonError ReasonError_MAX =
    Person_ReasonError_ReasonError_MAX;
  static constexpr int ReasonError_ARRAYSIZE =
    Person_ReasonError_ReasonError_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReasonError_descriptor() {
    return Person_ReasonError_descriptor();
  }
  template<typename T>
  static inline const std::string& ReasonError_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReasonError>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReasonError_Name.");
    return Person_ReasonError_Name(enum_t_value);
  }
  static inline bool ReasonError_Parse(const std::string& name,
      ReasonError* value) {
    return Person_ReasonError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.Person)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// -------------------------------------------------------------------

class AddressBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.AddressBook) */ {
 public:
  AddressBook();
  virtual ~AddressBook();

  AddressBook(const AddressBook& from);
  AddressBook(AddressBook&& from) noexcept
    : AddressBook() {
    *this = ::std::move(from);
  }

  inline AddressBook& operator=(const AddressBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBook& operator=(AddressBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddressBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressBook* internal_default_instance() {
    return reinterpret_cast<const AddressBook*>(
               &_AddressBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddressBook& a, AddressBook& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressBook* New() const final {
    return CreateMaybeMessage<AddressBook>(nullptr);
  }

  AddressBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddressBook& from);
  void MergeFrom(const AddressBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.AddressBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_addressbook_2eproto);
    return ::descriptor_table_addressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeopleFieldNumber = 1,
  };
  // repeated .protobuf.Person people = 1;
  int people_size() const;
  private:
  int _internal_people_size() const;
  public:
  void clear_people();
  ::protobuf::Person* mutable_people(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Person >*
      mutable_people();
  private:
  const ::protobuf::Person& _internal_people(int index) const;
  ::protobuf::Person* _internal_add_people();
  public:
  const ::protobuf::Person& people(int index) const;
  ::protobuf::Person* add_people();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Person >&
      people() const;

  // @@protoc_insertion_point(class_scope:protobuf.AddressBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Person > people_;
  friend struct ::TableStruct_addressbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person_CreateAccountWeb

// required uint64 requestId = 1;
inline bool Person_CreateAccountWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person_CreateAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_CreateAccountWeb::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void Person_CreateAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void Person_CreateAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWeb.requestId)
}

// required string email = 2;
inline bool Person_CreateAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void Person_CreateAccountWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person_CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWeb.email)
  return _internal_email();
}
inline void Person_CreateAccountWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWeb.email)
}
inline std::string* Person_CreateAccountWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.CreateAccountWeb.email)
  return _internal_mutable_email();
}
inline const std::string& Person_CreateAccountWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void Person_CreateAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person_CreateAccountWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.CreateAccountWeb.email)
}
inline void Person_CreateAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.CreateAccountWeb.email)
}
inline void Person_CreateAccountWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.CreateAccountWeb.email)
}
inline std::string* Person_CreateAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person_CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:protobuf.Person.CreateAccountWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person_CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.CreateAccountWeb.email)
}

// required string plaintextPassword = 3;
inline bool Person_CreateAccountWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_CreateAccountWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void Person_CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person_CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void Person_CreateAccountWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWeb.plaintextPassword)
}
inline std::string* Person_CreateAccountWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.CreateAccountWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& Person_CreateAccountWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void Person_CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person_CreateAccountWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.CreateAccountWeb.plaintextPassword)
}
inline void Person_CreateAccountWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.CreateAccountWeb.plaintextPassword)
}
inline void Person_CreateAccountWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.CreateAccountWeb.plaintextPassword)
}
inline std::string* Person_CreateAccountWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person_CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:protobuf.Person.CreateAccountWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person_CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// Person_CreateAccountWebSuccess

// required uint64 requestId = 1;
inline bool Person_CreateAccountWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_CreateAccountWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_CreateAccountWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void Person_CreateAccountWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Person_CreateAccountWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWebSuccess.requestId)
}

// required uint64 userId = 2;
inline bool Person_CreateAccountWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_CreateAccountWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void Person_CreateAccountWebSuccess::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void Person_CreateAccountWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void Person_CreateAccountWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// Person_CreateAccountWebFailure

// required uint64 requestId = 1;
inline bool Person_CreateAccountWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_CreateAccountWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_CreateAccountWebFailure::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_CreateAccountWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWebFailure.requestId)
  return _internal_requestid();
}
inline void Person_CreateAccountWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Person_CreateAccountWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWebFailure.requestId)
}

// required .protobuf.Person.ReasonError reason = 2;
inline bool Person_CreateAccountWebFailure::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_CreateAccountWebFailure::has_reason() const {
  return _internal_has_reason();
}
inline void Person_CreateAccountWebFailure::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protobuf::Person_ReasonError Person_CreateAccountWebFailure::_internal_reason() const {
  return static_cast< ::protobuf::Person_ReasonError >(reason_);
}
inline ::protobuf::Person_ReasonError Person_CreateAccountWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.CreateAccountWebFailure.reason)
  return _internal_reason();
}
inline void Person_CreateAccountWebFailure::_internal_set_reason(::protobuf::Person_ReasonError value) {
  assert(::protobuf::Person_ReasonError_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void Person_CreateAccountWebFailure::set_reason(::protobuf::Person_ReasonError value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.CreateAccountWebFailure.reason)
}

// -------------------------------------------------------------------

// Person_AuthenticateWeb

// required uint64 requestId = 1;
inline bool Person_AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person_AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_AuthenticateWeb::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void Person_AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void Person_AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWeb.requestId)
}

// required string email = 2;
inline bool Person_AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void Person_AuthenticateWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person_AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWeb.email)
  return _internal_email();
}
inline void Person_AuthenticateWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWeb.email)
}
inline std::string* Person_AuthenticateWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.AuthenticateWeb.email)
  return _internal_mutable_email();
}
inline const std::string& Person_AuthenticateWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void Person_AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person_AuthenticateWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.AuthenticateWeb.email)
}
inline void Person_AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.AuthenticateWeb.email)
}
inline void Person_AuthenticateWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.AuthenticateWeb.email)
}
inline std::string* Person_AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person_AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:protobuf.Person.AuthenticateWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person_AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.AuthenticateWeb.email)
}

// required string plaintextPassword = 3;
inline bool Person_AuthenticateWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_AuthenticateWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void Person_AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person_AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void Person_AuthenticateWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWeb.plaintextPassword)
}
inline std::string* Person_AuthenticateWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.AuthenticateWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& Person_AuthenticateWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void Person_AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person_AuthenticateWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.AuthenticateWeb.plaintextPassword)
}
inline void Person_AuthenticateWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.AuthenticateWeb.plaintextPassword)
}
inline void Person_AuthenticateWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.AuthenticateWeb.plaintextPassword)
}
inline std::string* Person_AuthenticateWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person_AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:protobuf.Person.AuthenticateWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person_AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// Person_AuthenticateWebSuccess

// required uint64 requestId = 1;
inline bool Person_AuthenticateWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_AuthenticateWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_AuthenticateWebSuccess::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void Person_AuthenticateWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void Person_AuthenticateWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWebSuccess.requestId)
}

// required uint64 userId = 2;
inline bool Person_AuthenticateWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person_AuthenticateWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void Person_AuthenticateWebSuccess::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void Person_AuthenticateWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void Person_AuthenticateWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWebSuccess.userId)
}

// required string creationDate = 3;
inline bool Person_AuthenticateWebSuccess::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_AuthenticateWebSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void Person_AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person_AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
inline void Person_AuthenticateWebSuccess::set_creationdate(const std::string& value) {
  _internal_set_creationdate(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWebSuccess.creationDate)
}
inline std::string* Person_AuthenticateWebSuccess::mutable_creationdate() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.AuthenticateWebSuccess.creationDate)
  return _internal_mutable_creationdate();
}
inline const std::string& Person_AuthenticateWebSuccess::_internal_creationdate() const {
  return creationdate_.GetNoArena();
}
inline void Person_AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person_AuthenticateWebSuccess::set_creationdate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.AuthenticateWebSuccess.creationDate)
}
inline void Person_AuthenticateWebSuccess::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.AuthenticateWebSuccess.creationDate)
}
inline void Person_AuthenticateWebSuccess::set_creationdate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.AuthenticateWebSuccess.creationDate)
}
inline std::string* Person_AuthenticateWebSuccess::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person_AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:protobuf.Person.AuthenticateWebSuccess.creationDate)
  if (!has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person_AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// Person_AuthenticateWebFailure

// required uint64 requestId = 1;
inline bool Person_AuthenticateWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person_AuthenticateWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void Person_AuthenticateWebFailure::clear_requestid() {
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person_AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void Person_AuthenticateWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Person_AuthenticateWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWebFailure.requestId)
}

// required .protobuf.Person.ReasonError reason = 2;
inline bool Person_AuthenticateWebFailure::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person_AuthenticateWebFailure::has_reason() const {
  return _internal_has_reason();
}
inline void Person_AuthenticateWebFailure::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protobuf::Person_ReasonError Person_AuthenticateWebFailure::_internal_reason() const {
  return static_cast< ::protobuf::Person_ReasonError >(reason_);
}
inline ::protobuf::Person_ReasonError Person_AuthenticateWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.AuthenticateWebFailure.reason)
  return _internal_reason();
}
inline void Person_AuthenticateWebFailure::_internal_set_reason(::protobuf::Person_ReasonError value) {
  assert(::protobuf::Person_ReasonError_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void Person_AuthenticateWebFailure::set_reason(::protobuf::Person_ReasonError value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.AuthenticateWebFailure.reason)
}

// -------------------------------------------------------------------

// Person

// required uint64 id = 1;
inline bool Person::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person::has_id() const {
  return _internal_has_id();
}
inline void Person::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Person::id() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Person::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.id)
}

// required string email = 2;
inline bool Person::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_email() const {
  return _internal_has_email();
}
inline void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.email)
  return _internal_email();
}
inline void Person::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.email)
}
inline std::string* Person::mutable_email() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.email)
  return _internal_mutable_email();
}
inline const std::string& Person::_internal_email() const {
  return email_.GetNoArena();
}
inline void Person::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.email)
}
inline void Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.email)
}
inline std::string* Person::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:protobuf.Person.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.email)
}

// required string password = 3;
inline bool Person::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person::has_password() const {
  return _internal_has_password();
}
inline void Person::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::password() const {
  // @@protoc_insertion_point(field_get:protobuf.Person.password)
  return _internal_password();
}
inline void Person::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:protobuf.Person.password)
}
inline std::string* Person::mutable_password() {
  // @@protoc_insertion_point(field_mutable:protobuf.Person.password)
  return _internal_mutable_password();
}
inline const std::string& Person::_internal_password() const {
  return password_.GetNoArena();
}
inline void Person::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Person::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Person.password)
}
inline void Person::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Person.password)
}
inline void Person::set_password(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Person.password)
}
inline std::string* Person::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Person::release_password() {
  // @@protoc_insertion_point(field_release:protobuf.Person.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Person.password)
}

// -------------------------------------------------------------------

// AddressBook

// repeated .protobuf.Person people = 1;
inline int AddressBook::_internal_people_size() const {
  return people_.size();
}
inline int AddressBook::people_size() const {
  return _internal_people_size();
}
inline void AddressBook::clear_people() {
  people_.Clear();
}
inline ::protobuf::Person* AddressBook::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.AddressBook.people)
  return people_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Person >*
AddressBook::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.AddressBook.people)
  return &people_;
}
inline const ::protobuf::Person& AddressBook::_internal_people(int index) const {
  return people_.Get(index);
}
inline const ::protobuf::Person& AddressBook::people(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.AddressBook.people)
  return _internal_people(index);
}
inline ::protobuf::Person* AddressBook::_internal_add_people() {
  return people_.Add();
}
inline ::protobuf::Person* AddressBook::add_people() {
  // @@protoc_insertion_point(field_add:protobuf.AddressBook.people)
  return _internal_add_people();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Person >&
AddressBook::people() const {
  // @@protoc_insertion_point(field_list:protobuf.AddressBook.people)
  return people_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf::Person_ReasonError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::Person_ReasonError>() {
  return ::protobuf::Person_ReasonError_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_addressbook_2eproto

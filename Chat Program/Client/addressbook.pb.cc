// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#include "addressbook.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_addressbook_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_addressbook_2eproto;
namespace protobuf {
class Person_CreateAccountWebDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_CreateAccountWeb> _instance;
} _Person_CreateAccountWeb_default_instance_;
class Person_CreateAccountWebSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_CreateAccountWebSuccess> _instance;
} _Person_CreateAccountWebSuccess_default_instance_;
class Person_CreateAccountWebFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_CreateAccountWebFailure> _instance;
} _Person_CreateAccountWebFailure_default_instance_;
class Person_AuthenticateWebDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_AuthenticateWeb> _instance;
} _Person_AuthenticateWeb_default_instance_;
class Person_AuthenticateWebSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_AuthenticateWebSuccess> _instance;
} _Person_AuthenticateWebSuccess_default_instance_;
class Person_AuthenticateWebFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person_AuthenticateWebFailure> _instance;
} _Person_AuthenticateWebFailure_default_instance_;
class PersonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Person> _instance;
} _Person_default_instance_;
class AddressBookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddressBook> _instance;
} _AddressBook_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_AddressBook_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_AddressBook_default_instance_;
    new (ptr) ::protobuf::AddressBook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::AddressBook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddressBook_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddressBook_addressbook_2eproto}, {
      &scc_info_Person_addressbook_2eproto.base,}};

static void InitDefaultsscc_info_Person_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_default_instance_;
    new (ptr) ::protobuf::Person();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_AuthenticateWeb_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_AuthenticateWeb_default_instance_;
    new (ptr) ::protobuf::Person_AuthenticateWeb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_AuthenticateWeb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_AuthenticateWeb_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_AuthenticateWeb_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_AuthenticateWebFailure_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_AuthenticateWebFailure_default_instance_;
    new (ptr) ::protobuf::Person_AuthenticateWebFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_AuthenticateWebFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_AuthenticateWebFailure_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_AuthenticateWebFailure_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_AuthenticateWebSuccess_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_AuthenticateWebSuccess_default_instance_;
    new (ptr) ::protobuf::Person_AuthenticateWebSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_AuthenticateWebSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_AuthenticateWebSuccess_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_AuthenticateWebSuccess_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_CreateAccountWeb_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_CreateAccountWeb_default_instance_;
    new (ptr) ::protobuf::Person_CreateAccountWeb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_CreateAccountWeb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_CreateAccountWeb_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_CreateAccountWeb_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_CreateAccountWebFailure_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_CreateAccountWebFailure_default_instance_;
    new (ptr) ::protobuf::Person_CreateAccountWebFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_CreateAccountWebFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_CreateAccountWebFailure_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_CreateAccountWebFailure_addressbook_2eproto}, {}};

static void InitDefaultsscc_info_Person_CreateAccountWebSuccess_addressbook_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Person_CreateAccountWebSuccess_default_instance_;
    new (ptr) ::protobuf::Person_CreateAccountWebSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Person_CreateAccountWebSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Person_CreateAccountWebSuccess_addressbook_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Person_CreateAccountWebSuccess_addressbook_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_addressbook_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_addressbook_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_addressbook_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_addressbook_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWeb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWeb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWeb, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWeb, email_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWeb, plaintextpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebSuccess, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebSuccess, userid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebFailure, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_CreateAccountWebFailure, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWeb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWeb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWeb, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWeb, email_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWeb, plaintextpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebSuccess, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebSuccess, userid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebSuccess, creationdate_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebFailure, requestid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person_AuthenticateWebFailure, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::Person, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Person, id_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person, email_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Person, password_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf::AddressBook, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::AddressBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::AddressBook, people_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::protobuf::Person_CreateAccountWeb)},
  { 11, 18, sizeof(::protobuf::Person_CreateAccountWebSuccess)},
  { 20, 27, sizeof(::protobuf::Person_CreateAccountWebFailure)},
  { 29, 37, sizeof(::protobuf::Person_AuthenticateWeb)},
  { 40, 48, sizeof(::protobuf::Person_AuthenticateWebSuccess)},
  { 51, 58, sizeof(::protobuf::Person_AuthenticateWebFailure)},
  { 60, 68, sizeof(::protobuf::Person)},
  { 71, 77, sizeof(::protobuf::AddressBook)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_CreateAccountWeb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_CreateAccountWebSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_CreateAccountWebFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_AuthenticateWeb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_AuthenticateWebSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_AuthenticateWebFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Person_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_AddressBook_default_instance_),
};

const char descriptor_table_protodef_addressbook_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021addressbook.proto\022\010protobuf\"\223\005\n\006Person"
  "\022\n\n\002id\030\001 \002(\004\022\r\n\005email\030\002 \002(\t\022\020\n\010password\030"
  "\003 \002(\t\032O\n\020CreateAccountWeb\022\021\n\trequestId\030\001"
  " \002(\004\022\r\n\005email\030\002 \002(\t\022\031\n\021plaintextPassword"
  "\030\003 \002(\t\032<\n\027CreateAccountWebSuccess\022\021\n\treq"
  "uestId\030\001 \002(\004\022\016\n\006userId\030\002 \002(\004\032Z\n\027CreateAc"
  "countWebFailure\022\021\n\trequestId\030\001 \002(\004\022,\n\006re"
  "ason\030\002 \002(\0162\034.protobuf.Person.ReasonError"
  "\032N\n\017AuthenticateWeb\022\021\n\trequestId\030\001 \002(\004\022\r"
  "\n\005email\030\002 \002(\t\022\031\n\021plaintextPassword\030\003 \002(\t"
  "\032Q\n\026AuthenticateWebSuccess\022\021\n\trequestId\030"
  "\001 \002(\004\022\016\n\006userId\030\002 \002(\004\022\024\n\014creationDate\030\003 "
  "\002(\t\032Y\n\026AuthenticateWebFailure\022\021\n\trequest"
  "Id\030\001 \002(\004\022,\n\006reason\030\002 \002(\0162\034.protobuf.Pers"
  "on.ReasonError\"s\n\013ReasonError\022\032\n\026ACCOUNT"
  "_ALREADY_EXISTS\020\000\022\024\n\020INVALID_PASSWORD\020\001\022"
  "\031\n\025INTERNAL_SERVER_ERROR\020\002\022\027\n\023INVALID_CR"
  "EDENTIALS\020\003\"/\n\013AddressBook\022 \n\006people\030\001 \003"
  "(\0132\020.protobuf.Person"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_addressbook_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_addressbook_2eproto_sccs[8] = {
  &scc_info_AddressBook_addressbook_2eproto.base,
  &scc_info_Person_addressbook_2eproto.base,
  &scc_info_Person_AuthenticateWeb_addressbook_2eproto.base,
  &scc_info_Person_AuthenticateWebFailure_addressbook_2eproto.base,
  &scc_info_Person_AuthenticateWebSuccess_addressbook_2eproto.base,
  &scc_info_Person_CreateAccountWeb_addressbook_2eproto.base,
  &scc_info_Person_CreateAccountWebFailure_addressbook_2eproto.base,
  &scc_info_Person_CreateAccountWebSuccess_addressbook_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_addressbook_2eproto_once;
static bool descriptor_table_addressbook_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_addressbook_2eproto = {
  &descriptor_table_addressbook_2eproto_initialized, descriptor_table_protodef_addressbook_2eproto, "addressbook.proto", 740,
  &descriptor_table_addressbook_2eproto_once, descriptor_table_addressbook_2eproto_sccs, descriptor_table_addressbook_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_addressbook_2eproto::offsets,
  file_level_metadata_addressbook_2eproto, 8, file_level_enum_descriptors_addressbook_2eproto, file_level_service_descriptors_addressbook_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_addressbook_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_addressbook_2eproto), true);
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Person_ReasonError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_addressbook_2eproto);
  return file_level_enum_descriptors_addressbook_2eproto[0];
}
bool Person_ReasonError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Person_ReasonError Person::ACCOUNT_ALREADY_EXISTS;
constexpr Person_ReasonError Person::INVALID_PASSWORD;
constexpr Person_ReasonError Person::INTERNAL_SERVER_ERROR;
constexpr Person_ReasonError Person::INVALID_CREDENTIALS;
constexpr Person_ReasonError Person::ReasonError_MIN;
constexpr Person_ReasonError Person::ReasonError_MAX;
constexpr int Person::ReasonError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Person_CreateAccountWeb::InitAsDefaultInstance() {
}
class Person_CreateAccountWeb::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_CreateAccountWeb>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaintextpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person_CreateAccountWeb::Person_CreateAccountWeb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.CreateAccountWeb)
}
Person_CreateAccountWeb::Person_CreateAccountWeb(const Person_CreateAccountWeb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plaintextpassword()) {
    plaintextpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintextpassword_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.CreateAccountWeb)
}

void Person_CreateAccountWeb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Person_CreateAccountWeb_addressbook_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestid_ = PROTOBUF_ULONGLONG(0);
}

Person_CreateAccountWeb::~Person_CreateAccountWeb() {
  // @@protoc_insertion_point(destructor:protobuf.Person.CreateAccountWeb)
  SharedDtor();
}

void Person_CreateAccountWeb::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Person_CreateAccountWeb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_CreateAccountWeb& Person_CreateAccountWeb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_CreateAccountWeb_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_CreateAccountWeb::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.CreateAccountWeb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      plaintextpassword_.ClearNonDefaultToEmptyNoArena();
    }
  }
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_CreateAccountWeb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_email(), ptr, ctx, "protobuf.Person.CreateAccountWeb.email");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string plaintextPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_plaintextpassword(), ptr, ctx, "protobuf.Person.CreateAccountWeb.plaintextPassword");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_CreateAccountWeb::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.CreateAccountWeb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.CreateAccountWeb.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string plaintextPassword = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plaintextpassword().data(), static_cast<int>(this->_internal_plaintextpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.CreateAccountWeb.plaintextPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plaintextpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.CreateAccountWeb)
  return target;
}

size_t Person_CreateAccountWeb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.CreateAccountWeb)
  size_t total_size = 0;

  if (has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (has_plaintextpassword()) {
    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());
  }

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  return total_size;
}
size_t Person_CreateAccountWeb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.CreateAccountWeb)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());

    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_CreateAccountWeb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.CreateAccountWeb)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_CreateAccountWeb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_CreateAccountWeb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.CreateAccountWeb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.CreateAccountWeb)
    MergeFrom(*source);
  }
}

void Person_CreateAccountWeb::MergeFrom(const Person_CreateAccountWeb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.CreateAccountWeb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      plaintextpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintextpassword_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_CreateAccountWeb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.CreateAccountWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_CreateAccountWeb::CopyFrom(const Person_CreateAccountWeb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.CreateAccountWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_CreateAccountWeb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Person_CreateAccountWeb::InternalSwap(Person_CreateAccountWeb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plaintextpassword_.Swap(&other->plaintextpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_CreateAccountWeb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person_CreateAccountWebSuccess::InitAsDefaultInstance() {
}
class Person_CreateAccountWebSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_CreateAccountWebSuccess>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person_CreateAccountWebSuccess::Person_CreateAccountWebSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.CreateAccountWebSuccess)
}
Person_CreateAccountWebSuccess::Person_CreateAccountWebSuccess(const Person_CreateAccountWebSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.CreateAccountWebSuccess)
}

void Person_CreateAccountWebSuccess::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
}

Person_CreateAccountWebSuccess::~Person_CreateAccountWebSuccess() {
  // @@protoc_insertion_point(destructor:protobuf.Person.CreateAccountWebSuccess)
  SharedDtor();
}

void Person_CreateAccountWebSuccess::SharedDtor() {
}

void Person_CreateAccountWebSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_CreateAccountWebSuccess& Person_CreateAccountWebSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_CreateAccountWebSuccess_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_CreateAccountWebSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.CreateAccountWebSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_CreateAccountWebSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_CreateAccountWebSuccess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.CreateAccountWebSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required uint64 userId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.CreateAccountWebSuccess)
  return target;
}

size_t Person_CreateAccountWebSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.CreateAccountWebSuccess)
  size_t total_size = 0;

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  if (has_userid()) {
    // required uint64 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  return total_size;
}
size_t Person_CreateAccountWebSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.CreateAccountWebSuccess)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

    // required uint64 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_CreateAccountWebSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.CreateAccountWebSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_CreateAccountWebSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_CreateAccountWebSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.CreateAccountWebSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.CreateAccountWebSuccess)
    MergeFrom(*source);
  }
}

void Person_CreateAccountWebSuccess::MergeFrom(const Person_CreateAccountWebSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.CreateAccountWebSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_CreateAccountWebSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.CreateAccountWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_CreateAccountWebSuccess::CopyFrom(const Person_CreateAccountWebSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.CreateAccountWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_CreateAccountWebSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Person_CreateAccountWebSuccess::InternalSwap(Person_CreateAccountWebSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_CreateAccountWebSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person_CreateAccountWebFailure::InitAsDefaultInstance() {
}
class Person_CreateAccountWebFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_CreateAccountWebFailure>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person_CreateAccountWebFailure::Person_CreateAccountWebFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.CreateAccountWebFailure)
}
Person_CreateAccountWebFailure::Person_CreateAccountWebFailure(const Person_CreateAccountWebFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.CreateAccountWebFailure)
}

void Person_CreateAccountWebFailure::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
}

Person_CreateAccountWebFailure::~Person_CreateAccountWebFailure() {
  // @@protoc_insertion_point(destructor:protobuf.Person.CreateAccountWebFailure)
  SharedDtor();
}

void Person_CreateAccountWebFailure::SharedDtor() {
}

void Person_CreateAccountWebFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_CreateAccountWebFailure& Person_CreateAccountWebFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_CreateAccountWebFailure_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_CreateAccountWebFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.CreateAccountWebFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_CreateAccountWebFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .protobuf.Person.ReasonError reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf::Person_ReasonError_IsValid(val))) {
            _internal_set_reason(static_cast<::protobuf::Person_ReasonError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_CreateAccountWebFailure::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.CreateAccountWebFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required .protobuf.Person.ReasonError reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.CreateAccountWebFailure)
  return target;
}

size_t Person_CreateAccountWebFailure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.CreateAccountWebFailure)
  size_t total_size = 0;

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  if (has_reason()) {
    // required .protobuf.Person.ReasonError reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return total_size;
}
size_t Person_CreateAccountWebFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.CreateAccountWebFailure)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

    // required .protobuf.Person.ReasonError reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_CreateAccountWebFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.CreateAccountWebFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_CreateAccountWebFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_CreateAccountWebFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.CreateAccountWebFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.CreateAccountWebFailure)
    MergeFrom(*source);
  }
}

void Person_CreateAccountWebFailure::MergeFrom(const Person_CreateAccountWebFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.CreateAccountWebFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_CreateAccountWebFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.CreateAccountWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_CreateAccountWebFailure::CopyFrom(const Person_CreateAccountWebFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.CreateAccountWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_CreateAccountWebFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Person_CreateAccountWebFailure::InternalSwap(Person_CreateAccountWebFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_CreateAccountWebFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person_AuthenticateWeb::InitAsDefaultInstance() {
}
class Person_AuthenticateWeb::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_AuthenticateWeb>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plaintextpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person_AuthenticateWeb::Person_AuthenticateWeb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.AuthenticateWeb)
}
Person_AuthenticateWeb::Person_AuthenticateWeb(const Person_AuthenticateWeb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plaintextpassword()) {
    plaintextpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintextpassword_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.AuthenticateWeb)
}

void Person_AuthenticateWeb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Person_AuthenticateWeb_addressbook_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestid_ = PROTOBUF_ULONGLONG(0);
}

Person_AuthenticateWeb::~Person_AuthenticateWeb() {
  // @@protoc_insertion_point(destructor:protobuf.Person.AuthenticateWeb)
  SharedDtor();
}

void Person_AuthenticateWeb::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plaintextpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Person_AuthenticateWeb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_AuthenticateWeb& Person_AuthenticateWeb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_AuthenticateWeb_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_AuthenticateWeb::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.AuthenticateWeb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      plaintextpassword_.ClearNonDefaultToEmptyNoArena();
    }
  }
  requestid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_AuthenticateWeb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_email(), ptr, ctx, "protobuf.Person.AuthenticateWeb.email");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string plaintextPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_plaintextpassword(), ptr, ctx, "protobuf.Person.AuthenticateWeb.plaintextPassword");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_AuthenticateWeb::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.AuthenticateWeb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.AuthenticateWeb.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string plaintextPassword = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plaintextpassword().data(), static_cast<int>(this->_internal_plaintextpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.AuthenticateWeb.plaintextPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_plaintextpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.AuthenticateWeb)
  return target;
}

size_t Person_AuthenticateWeb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.AuthenticateWeb)
  size_t total_size = 0;

  if (has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (has_plaintextpassword()) {
    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());
  }

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  return total_size;
}
size_t Person_AuthenticateWeb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.AuthenticateWeb)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string plaintextPassword = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plaintextpassword());

    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_AuthenticateWeb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.AuthenticateWeb)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_AuthenticateWeb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_AuthenticateWeb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.AuthenticateWeb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.AuthenticateWeb)
    MergeFrom(*source);
  }
}

void Person_AuthenticateWeb::MergeFrom(const Person_AuthenticateWeb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.AuthenticateWeb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      plaintextpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plaintextpassword_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_AuthenticateWeb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.AuthenticateWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_AuthenticateWeb::CopyFrom(const Person_AuthenticateWeb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.AuthenticateWeb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_AuthenticateWeb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Person_AuthenticateWeb::InternalSwap(Person_AuthenticateWeb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plaintextpassword_.Swap(&other->plaintextpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_AuthenticateWeb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person_AuthenticateWebSuccess::InitAsDefaultInstance() {
}
class Person_AuthenticateWebSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_AuthenticateWebSuccess>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creationdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Person_AuthenticateWebSuccess::Person_AuthenticateWebSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.AuthenticateWebSuccess)
}
Person_AuthenticateWebSuccess::Person_AuthenticateWebSuccess(const Person_AuthenticateWebSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creationdate()) {
    creationdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationdate_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.AuthenticateWebSuccess)
}

void Person_AuthenticateWebSuccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Person_AuthenticateWebSuccess_addressbook_2eproto.base);
  creationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
}

Person_AuthenticateWebSuccess::~Person_AuthenticateWebSuccess() {
  // @@protoc_insertion_point(destructor:protobuf.Person.AuthenticateWebSuccess)
  SharedDtor();
}

void Person_AuthenticateWebSuccess::SharedDtor() {
  creationdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Person_AuthenticateWebSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_AuthenticateWebSuccess& Person_AuthenticateWebSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_AuthenticateWebSuccess_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_AuthenticateWebSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.AuthenticateWebSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    creationdate_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(userid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_AuthenticateWebSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string creationDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_creationdate(), ptr, ctx, "protobuf.Person.AuthenticateWebSuccess.creationDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_AuthenticateWebSuccess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.AuthenticateWebSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required uint64 userId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_userid(), target);
  }

  // required string creationDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creationdate().data(), static_cast<int>(this->_internal_creationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.AuthenticateWebSuccess.creationDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creationdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.AuthenticateWebSuccess)
  return target;
}

size_t Person_AuthenticateWebSuccess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.AuthenticateWebSuccess)
  size_t total_size = 0;

  if (has_creationdate()) {
    // required string creationDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationdate());
  }

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  if (has_userid()) {
    // required uint64 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  return total_size;
}
size_t Person_AuthenticateWebSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.AuthenticateWebSuccess)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string creationDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creationdate());

    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

    // required uint64 userId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_AuthenticateWebSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.AuthenticateWebSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_AuthenticateWebSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_AuthenticateWebSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.AuthenticateWebSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.AuthenticateWebSuccess)
    MergeFrom(*source);
  }
}

void Person_AuthenticateWebSuccess::MergeFrom(const Person_AuthenticateWebSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.AuthenticateWebSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      creationdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creationdate_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_AuthenticateWebSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.AuthenticateWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_AuthenticateWebSuccess::CopyFrom(const Person_AuthenticateWebSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.AuthenticateWebSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_AuthenticateWebSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Person_AuthenticateWebSuccess::InternalSwap(Person_AuthenticateWebSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  creationdate_.Swap(&other->creationdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_AuthenticateWebSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person_AuthenticateWebFailure::InitAsDefaultInstance() {
}
class Person_AuthenticateWebFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<Person_AuthenticateWebFailure>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person_AuthenticateWebFailure::Person_AuthenticateWebFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person.AuthenticateWebFailure)
}
Person_AuthenticateWebFailure::Person_AuthenticateWebFailure(const Person_AuthenticateWebFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Person.AuthenticateWebFailure)
}

void Person_AuthenticateWebFailure::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
}

Person_AuthenticateWebFailure::~Person_AuthenticateWebFailure() {
  // @@protoc_insertion_point(destructor:protobuf.Person.AuthenticateWebFailure)
  SharedDtor();
}

void Person_AuthenticateWebFailure::SharedDtor() {
}

void Person_AuthenticateWebFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person_AuthenticateWebFailure& Person_AuthenticateWebFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_AuthenticateWebFailure_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person_AuthenticateWebFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person.AuthenticateWebFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person_AuthenticateWebFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .protobuf.Person.ReasonError reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf::Person_ReasonError_IsValid(val))) {
            _internal_set_reason(static_cast<::protobuf::Person_ReasonError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_AuthenticateWebFailure::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person.AuthenticateWebFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_requestid(), target);
  }

  // required .protobuf.Person.ReasonError reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person.AuthenticateWebFailure)
  return target;
}

size_t Person_AuthenticateWebFailure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person.AuthenticateWebFailure)
  size_t total_size = 0;

  if (has_requestid()) {
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());
  }

  if (has_reason()) {
    // required .protobuf.Person.ReasonError reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return total_size;
}
size_t Person_AuthenticateWebFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person.AuthenticateWebFailure)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 requestId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_requestid());

    // required .protobuf.Person.ReasonError reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_AuthenticateWebFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person.AuthenticateWebFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_AuthenticateWebFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_AuthenticateWebFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person.AuthenticateWebFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person.AuthenticateWebFailure)
    MergeFrom(*source);
  }
}

void Person_AuthenticateWebFailure::MergeFrom(const Person_AuthenticateWebFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person.AuthenticateWebFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person_AuthenticateWebFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person.AuthenticateWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_AuthenticateWebFailure::CopyFrom(const Person_AuthenticateWebFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person.AuthenticateWebFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_AuthenticateWebFailure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Person_AuthenticateWebFailure::InternalSwap(Person_AuthenticateWebFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_AuthenticateWebFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Person::InitAsDefaultInstance() {
}
class Person::_Internal {
 public:
  using HasBits = decltype(std::declval<Person>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Person::Person()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Person)
}
Person::Person(const Person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:protobuf.Person)
}

void Person::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Person_addressbook_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_ULONGLONG(0);
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:protobuf.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Person& Person::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Person_addressbook_2eproto.base);
  return *internal_default_instance();
}


void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Person::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_email(), ptr, ctx, "protobuf.Person.email");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_password(), ptr, ctx, "protobuf.Person.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string email = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // required string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf.Person.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Person)
  return target;
}

size_t Person::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf.Person)
  size_t total_size = 0;

  if (has_email()) {
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (has_password()) {
    // required string password = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  return total_size;
}
size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Person)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string email = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());

    // required string password = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());

    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Person)
  GOOGLE_DCHECK_NE(&from, this);
  const Person* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Person)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Person::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Person::InternalSwap(Person* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddressBook::InitAsDefaultInstance() {
}
class AddressBook::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressBook>()._has_bits_);
};

AddressBook::AddressBook()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.AddressBook)
}
AddressBook::AddressBook(const AddressBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      people_(from.people_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf.AddressBook)
}

void AddressBook::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddressBook_addressbook_2eproto.base);
}

AddressBook::~AddressBook() {
  // @@protoc_insertion_point(destructor:protobuf.AddressBook)
  SharedDtor();
}

void AddressBook::SharedDtor() {
}

void AddressBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddressBook& AddressBook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddressBook_addressbook_2eproto.base);
  return *internal_default_instance();
}


void AddressBook::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.AddressBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  people_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AddressBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protobuf.Person people = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_people(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressBook::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.AddressBook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf.Person people = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_people_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_people(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.AddressBook)
  return target;
}

size_t AddressBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.AddressBook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.Person people = 1;
  total_size += 1UL * this->_internal_people_size();
  for (const auto& msg : this->people_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddressBook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.AddressBook)
  GOOGLE_DCHECK_NE(&from, this);
  const AddressBook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddressBook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.AddressBook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.AddressBook)
    MergeFrom(*source);
  }
}

void AddressBook::MergeFrom(const AddressBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.AddressBook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  people_.MergeFrom(from.people_);
}

void AddressBook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.AddressBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBook::CopyFrom(const AddressBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.AddressBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBook::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->people())) return false;
  return true;
}

void AddressBook::InternalSwap(AddressBook* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  people_.InternalSwap(&other->people_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressBook::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::Person_CreateAccountWeb* Arena::CreateMaybeMessage< ::protobuf::Person_CreateAccountWeb >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_CreateAccountWeb >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person_CreateAccountWebSuccess* Arena::CreateMaybeMessage< ::protobuf::Person_CreateAccountWebSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_CreateAccountWebSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person_CreateAccountWebFailure* Arena::CreateMaybeMessage< ::protobuf::Person_CreateAccountWebFailure >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_CreateAccountWebFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person_AuthenticateWeb* Arena::CreateMaybeMessage< ::protobuf::Person_AuthenticateWeb >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_AuthenticateWeb >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person_AuthenticateWebSuccess* Arena::CreateMaybeMessage< ::protobuf::Person_AuthenticateWebSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_AuthenticateWebSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person_AuthenticateWebFailure* Arena::CreateMaybeMessage< ::protobuf::Person_AuthenticateWebFailure >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person_AuthenticateWebFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::Person* Arena::CreateMaybeMessage< ::protobuf::Person >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::Person >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::AddressBook* Arena::CreateMaybeMessage< ::protobuf::AddressBook >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf::AddressBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
